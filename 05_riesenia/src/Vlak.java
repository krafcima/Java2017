/** Exercise 5 - boolean vlak(int[] vstup)
 *    
 */

/** Class Vlak contains a single static method vlak(int[] vstup) as required in 
 *    the exercise 6 specification. It returns true, if the sequence vstup could be
 *    generated by inserting methods pop() to the sequence of push(1), push(2), ..., push(N).
 *    The testing program - method main(), generates random sequence of length N, 
 *    and prints the output from the method vlak().
 * @author Pavel
 *
 */
public class Vlak 
{
	/** permutation length */
	static final int N = 5;    
	
	/** determine whether the sequence vstup can be generated from 3,2,1 using stack.
	 * 
	 * @param vstup - array containing a permutation of numbers 1..N
	 * @return true, if the sequence 3,2,1 can be transformed using one stack to the sequence vstup
	 */
	static boolean vlak(int[] vstup)
	{
		Stack s = new Stack(vstup.length);  // stack is used to simulate the middle track
		int i = vstup.length - 1;			// the end of permutation was popped first
		int j = 1;							// "1" is at the end of sequence before pushing
		while (i >= 0)		// while there are more elements on the left
		{
			if (!s.isEmpty()) 	// if stack is not empty, we may try to pop 
			{
				if (s.S[s.top] == vstup[i])		// if the desired number is on the stack 
				{
					s.pop();					// it should be popped
					i--;						// move to left in the permutation
					continue;
				}
			}
			if (j > vstup.length) return false;	// there is nothing more to push - impossible!
			else s.push(j++);		// top of stack did not match => we have to push
		}
		return true;	// the whole permutation did match, sequence is possible
	}
	
	/** Testing program for method vlak() on a random permutation.
	 * @param args - this program takes no arguments
	 */
	public static void main(String[] args) 
	{
		int[] a = new int[N];			// create example array
		for (int i = 0; i < N; i++)
			a[i] = i + 1;				// fill it with permutation 1..N
		for (int i = 0; i < N; i++)
		{
			int j = (int)(Math.random() * N);		// randomly shuffle the array
			int tmp = a[j];
			a[j] = a[i];
			a[i] = tmp;
		}
		// print the random permutation 
		for (int i = 0; i < N - 1; i++) System.out.print(a[i] + ",");
		// and the result returned by vlak() method
		System.out.println(a[N - 1] + ": " + vlak(a));	
	}
}
